#ifndef __BSP_SERIALPORT_DRIVER_H__
#define __BSP_SERIALPORT_DRIVER_H__


#include "stdint.h"


typedef enum
{
    E_SERIALPORT_DRIVER_RET_STATUS_OK = 0,
    E_SERIALPORT_DRIVER_RET_STATUS_INPUT_PARAM_ERR,
    E_SERIALPORT_DRIVER_RET_STATUS_INIT_STATUS_ERR,
    E_SERIALPORT_DRIVER_RET_STATUS_RESOURCE_ERR,
    E_SERIALPORT_DRIVER_RET_STATUS_INTERNAL_ERR,
    E_SERIALPORT_DRIVER_RET_STATUS_TX_STATUS_BUSY,
    E_SERIALPORT_DRIVER_RET_STATUS_TX_MAX_SIZE_ERR,
} E_SERIALPORT_DRIVER_RET_STATUS_T;

typedef enum
{
    E_SERIALPORT_DRIVER_INIT_STATUS_NO = 0,
    E_SERIALPORT_DRIVER_INIT_STATUS_OK,
} E_SERIALPORT_DRIVER_INIT_STATUS_T;

typedef enum
{
    E_SERIALPORT_DRIVER_TX_STATUS_NONE = 0,
    E_SERIALPORT_DRIVER_TX_STATUS_READY,
    E_SERIALPORT_DRIVER_TX_STATUS_BUSY,
} E_SERIALPORT_DRIVER_TX_STATUS_T;

typedef enum
{
    E_SERIALPORT_DRIVER_RX_STATUS_NONE = 0,
    E_SERIALPORT_DRIVER_RX_STATUS_READY,
    E_SERIALPORT_DRIVER_RX_STATUS_BUSY,
} E_SERIALPORT_DRIVER_RX_STATUS_T;

typedef E_SERIALPORT_DRIVER_RET_STATUS_T (*PF_SERIALPORT_DRIVER_HW_TRANSMIT_DMA_START_T)(const uint8_t* const, const uint16_t);
typedef E_SERIALPORT_DRIVER_RET_STATUS_T (*PF_SERIALPORT_DRIVER_HW_RECEIVE_DMA_ENABLE_T)(void);
typedef void (*PF_SERIALPORT_DRIVER_TRANSMIT_COMPLETE_CALLBACK_T)(void);

typedef struct
{
    PF_SERIALPORT_DRIVER_HW_TRANSMIT_DMA_START_T pf_hw_transmit_dma_start;
    PF_SERIALPORT_DRIVER_HW_RECEIVE_DMA_ENABLE_T pf_hw_receive_dma_idle_enable;
} S_SERIALPORT_DRIVER_HW_INTERFACE_T;

typedef struct
{
    S_SERIALPORT_DRIVER_HW_INTERFACE_T* p_hw_intf;
} S_SERIALPORT_DRIVER_INIT_CONFIG_T;

typedef struct 
{
    E_SERIALPORT_DRIVER_INIT_STATUS_T is_inited;

    volatile E_SERIALPORT_DRIVER_TX_STATUS_T tx_status;
    volatile E_SERIALPORT_DRIVER_RX_STATUS_T rx_status;

    S_SERIALPORT_DRIVER_HW_INTERFACE_T* p_hw_intf;

    volatile PF_SERIALPORT_DRIVER_TRANSMIT_COMPLETE_CALLBACK_T pf_transmit_complete_callback;
} S_SERIALPORT_DRIVER_T;


extern E_SERIALPORT_DRIVER_RET_STATUS_T serialport_driver_init(const S_SERIALPORT_DRIVER_INIT_CONFIG_T* const);
extern E_SERIALPORT_DRIVER_RET_STATUS_T serialport_driver_deinit(void);

extern E_SERIALPORT_DRIVER_RET_STATUS_T serialport_driver_transmit_dma_start(const uint8_t* const, const uint32_t);
extern E_SERIALPORT_DRIVER_RET_STATUS_T serialport_driver_transmit_complete_callback_register(PF_SERIALPORT_DRIVER_TRANSMIT_COMPLETE_CALLBACK_T pf_callback);
extern E_SERIALPORT_DRIVER_RET_STATUS_T serialport_driver_on_transmit_complete(void);

extern E_SERIALPORT_DRIVER_RET_STATUS_T serialport_driver_receive_dma_idle_enable(void);

#endif /* __BSP_SERIALPORT_DRIVER_H__ */
